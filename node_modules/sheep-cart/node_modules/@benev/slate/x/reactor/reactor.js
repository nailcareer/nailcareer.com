var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Reactor_wait;
export class Reactor {
    constructor(flat, signals) {
        this.flat = flat;
        this.signals = signals;
        _Reactor_wait.set(this, Promise.resolve());
    }
    get wait() {
        return Promise
            .all([this.flat.wait, this.signals.wait])
            .then(() => __classPrivateFieldGet(this, _Reactor_wait, "f"));
    }
    reaction(collector, responder) {
        const actuate = responder
            ? () => responder(collect())
            : () => collect();
        const lean = this.lean(actuate);
        const collect = () => lean.collect(collector);
        collect();
        return lean.stop;
    }
    lean(actor) {
        const lean1 = this.flat.lean(actor);
        const lean2 = this.signals.lean(actor);
        return {
            stop() {
                lean1.stop();
                lean2.stop();
            },
            collect(collector) {
                return lean1.collect(() => lean2.collect(collector));
            },
        };
    }
}
_Reactor_wait = new WeakMap();
//# sourceMappingURL=reactor.js.map