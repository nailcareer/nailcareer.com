var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
import { UseOxygen } from "../parts/use/tailored.js";
import { SilverElement } from "../../element/silver.js";
import { setup_reactivity } from "../parts/setup_reactivity.js";
export const prepare_oxygen = ((shell) => (renderer) => {
    var _use, _rend, _reactivity, _a;
    return (_a = class extends SilverElement {
            constructor() {
                super(...arguments);
                _use.set(this, new UseOxygen(this, () => void this.requestUpdate(), shell.context));
                _rend.set(this, UseOxygen.wrap(__classPrivateFieldGet(this, _use, "f"), () => renderer(__classPrivateFieldGet(this, _use, "f"))));
                _reactivity.set(this, void 0);
            }
            render() {
                var _b;
                return (_b = __classPrivateFieldGet(this, _reactivity, "f")) === null || _b === void 0 ? void 0 : _b.render();
            }
            connectedCallback() {
                super.connectedCallback();
                __classPrivateFieldSet(this, _reactivity, setup_reactivity(__classPrivateFieldGet(this, _rend, "f"), () => void this.requestUpdate()), "f");
                UseOxygen.reconnect(__classPrivateFieldGet(this, _use, "f"));
            }
            disconnectedCallback() {
                super.disconnectedCallback();
                if (__classPrivateFieldGet(this, _reactivity, "f")) {
                    __classPrivateFieldGet(this, _reactivity, "f").stop();
                    __classPrivateFieldSet(this, _reactivity, undefined, "f");
                }
                UseOxygen.disconnect(__classPrivateFieldGet(this, _use, "f"));
            }
        },
        _use = new WeakMap(),
        _rend = new WeakMap(),
        _reactivity = new WeakMap(),
        _a);
});
//# sourceMappingURL=oxygen.js.map