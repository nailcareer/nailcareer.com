var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
import { AsyncDirective, directive } from "lit/async-directive.js";
import { UseQuartz } from "../parts/use/tailored.js";
import { debounce } from "../../tools/debounce/debounce.js";
import { setup_reactivity } from "../parts/setup_reactivity.js";
export const prepare_quartz = ((shell) => (renderer) => {
    var _props, _rerender, _use, _rend, _reactivity, _a;
    return directive((_a = class extends AsyncDirective {
            constructor() {
                super(...arguments);
                _props.set(this, void 0);
                _rerender.set(this, debounce(0, () => {
                    if (__classPrivateFieldGet(this, _props, "f"))
                        this.setValue(this.render(...__classPrivateFieldGet(this, _props, "f")));
                }));
                _use.set(this, new UseQuartz(__classPrivateFieldGet(this, _rerender, "f"), shell.context));
                _rend.set(this, UseQuartz.wrap(__classPrivateFieldGet(this, _use, "f"), renderer(__classPrivateFieldGet(this, _use, "f"))));
                _reactivity.set(this, setup_reactivity(__classPrivateFieldGet(this, _rend, "f"), __classPrivateFieldGet(this, _rerender, "f")));
            }
            render(...props) {
                var _b;
                __classPrivateFieldSet(this, _props, props, "f");
                return (_b = __classPrivateFieldGet(this, _reactivity, "f")) === null || _b === void 0 ? void 0 : _b.render(...props);
            }
            reconnected() {
                UseQuartz.reconnect(__classPrivateFieldGet(this, _use, "f"));
                __classPrivateFieldSet(this, _reactivity, setup_reactivity(__classPrivateFieldGet(this, _rend, "f"), __classPrivateFieldGet(this, _rerender, "f")), "f");
            }
            disconnected() {
                UseQuartz.disconnect(__classPrivateFieldGet(this, _use, "f"));
                if (__classPrivateFieldGet(this, _reactivity, "f")) {
                    __classPrivateFieldGet(this, _reactivity, "f").stop();
                    __classPrivateFieldSet(this, _reactivity, undefined, "f");
                }
            }
        },
        _props = new WeakMap(),
        _rerender = new WeakMap(),
        _use = new WeakMap(),
        _rend = new WeakMap(),
        _reactivity = new WeakMap(),
        _a));
});
//# sourceMappingURL=quartz.js.map