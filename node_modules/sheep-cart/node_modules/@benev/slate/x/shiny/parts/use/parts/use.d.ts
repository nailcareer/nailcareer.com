import { Context } from "../../../context.js";
import { InitFn, SetupFn } from "./types.js";
import { Signal } from "../../../../signals/signal.js";
import { OpSignal } from "../../../../signals/op_signal.js";
export declare class Use<C extends Context = Context> {
    #private;
    static wrap<F extends (...args: any[]) => any>(use: Use, fun: F): F;
    static disconnect(use: Use): void;
    static reconnect(use: Use): void;
    constructor(rerender: () => void, context: C);
    get context(): C;
    rerender(): void;
    setup(func: SetupFn): void;
    init<R>(func: InitFn<R>): R;
    prepare<T>(prep: () => T): T;
    state<T>(init: T | (() => T)): readonly [T, (v: T) => void, () => T];
    flatstate<S extends Record<string, any>>(init: S | (() => S)): S;
    signal<T>(init: T | (() => T)): Signal<T>;
    computed<T>(update: () => T): Signal<T>;
    op<T>(): OpSignal<T>;
    watch<T>(collector: () => T): T;
}
