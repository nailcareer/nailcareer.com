var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _UseShadow_element, _UseShadow_shadow;
import { Use } from "./use.js";
export class UseShadow extends Use {
    get element() { return __classPrivateFieldGet(this, _UseShadow_element, "f"); }
    get shadow() { return __classPrivateFieldGet(this, _UseShadow_shadow, "f"); }
    constructor(element, shadow, rerender, context) {
        super(rerender, context);
        _UseShadow_element.set(this, void 0);
        _UseShadow_shadow.set(this, void 0);
        __classPrivateFieldSet(this, _UseShadow_element, element, "f");
        __classPrivateFieldSet(this, _UseShadow_shadow, shadow, "f");
    }
}
_UseShadow_element = new WeakMap(), _UseShadow_shadow = new WeakMap();
//# sourceMappingURL=use_shadow.js.map