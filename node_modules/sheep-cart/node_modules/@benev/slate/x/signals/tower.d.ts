import { Op } from "../op/op.js";
import { Signal } from "./signal.js";
import { Lean, ReactorCore } from "../reactor/types.js";
export declare class SignalTower implements ReactorCore {
    #private;
    signal<V>(value: V): Signal<V>;
    computed<V>(fun: () => V): Signal<V>;
    op<V>(): Signal<Op.For<V>>;
    many<S extends {
        [key: string]: any;
    }>(states: S): { [P in keyof S]: Signal<S[P]>; };
    reaction<P>(collector: () => P, responder?: (payload: P) => void): () => void;
    lean(actor: () => void): Lean;
    get wait(): Promise<void>;
}
