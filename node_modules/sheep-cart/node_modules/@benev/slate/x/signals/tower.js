var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SignalTower_signals, _SignalTower_waiters;
import { ob } from "../tools/ob.js";
import { Signal } from "./signal.js";
import { OpSignal } from "./op_signal.js";
import { SignalTracker } from "./parts/tracker.js";
export class SignalTower {
    constructor() {
        // TODO wrap all signals in WeakRef, to promote garbage collection?
        _SignalTower_signals.set(this, new Set());
        _SignalTower_waiters.set(this, new Set());
    }
    signal(value) {
        const signal = new Signal(value);
        __classPrivateFieldGet(this, _SignalTower_signals, "f").add(signal);
        return signal;
    }
    computed(fun) {
        const signal = this.signal(fun());
        this.reaction(() => { signal.value = fun(); });
        return signal;
    }
    op() {
        const signal = new OpSignal();
        __classPrivateFieldGet(this, _SignalTower_signals, "f").add(signal);
        return signal;
    }
    many(states) {
        return (ob.map(states, state => this.signal(state)));
    }
    reaction(collector, responder) {
        const tracker = new SignalTracker({
            waiters: __classPrivateFieldGet(this, _SignalTower_waiters, "f"),
            all_signals: __classPrivateFieldGet(this, _SignalTower_signals, "f"),
        });
        const track = { collector, responder };
        const { recording } = tracker.observe(track.collector);
        tracker.add_listeners(track, recording);
        return () => tracker.shutdown();
    }
    lean(actor) {
        const tracker = new SignalTracker({
            waiters: __classPrivateFieldGet(this, _SignalTower_waiters, "f"),
            all_signals: __classPrivateFieldGet(this, _SignalTower_signals, "f"),
        });
        const track = { lean: true, actor };
        return {
            stop: () => tracker.shutdown(),
            collect: collector => {
                const { payload, recording } = tracker.observe(collector);
                tracker.add_listeners(track, recording);
                return payload;
            },
        };
    }
    get wait() {
        return Promise.all([...__classPrivateFieldGet(this, _SignalTower_signals, "f")].map(s => s.wait))
            .then(() => Promise.all([...__classPrivateFieldGet(this, _SignalTower_waiters, "f")]))
            .then(() => { __classPrivateFieldGet(this, _SignalTower_waiters, "f").clear(); });
    }
}
_SignalTower_signals = new WeakMap(), _SignalTower_waiters = new WeakMap();
//# sourceMappingURL=tower.js.map