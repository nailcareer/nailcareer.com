var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Signal_value, _Signal_lock, _Signal_wait, _Signal_listeners, _Signal_invoke_listeners, _a;
import { accessed } from "./parts/accessed_symbol.js";
import { debounce } from "../tools/debounce/debounce.js";
import { SignalCircularError } from "./parts/circular_error.js";
export class Signal {
    constructor(v) {
        _Signal_value.set(this, void 0);
        _Signal_lock.set(this, false);
        _Signal_wait.set(this, void 0);
        _Signal_listeners.set(this, new Set());
        this[_a] = false;
        _Signal_invoke_listeners.set(this, debounce(0, () => {
            const value = __classPrivateFieldGet(this, _Signal_value, "f");
            __classPrivateFieldSet(this, _Signal_lock, true, "f");
            for (const listener of __classPrivateFieldGet(this, _Signal_listeners, "f"))
                listener(value);
            __classPrivateFieldSet(this, _Signal_lock, false, "f");
            return value;
        }));
        __classPrivateFieldSet(this, _Signal_value, v, "f");
        __classPrivateFieldSet(this, _Signal_wait, Promise.resolve(v), "f");
    }
    subscribe(listener) {
        __classPrivateFieldGet(this, _Signal_listeners, "f").add(listener);
        return () => void __classPrivateFieldGet(this, _Signal_listeners, "f").delete(listener);
    }
    once(listener) {
        const actual_listener = v => {
            listener(v);
            __classPrivateFieldGet(this, _Signal_listeners, "f").delete(actual_listener);
        };
        __classPrivateFieldGet(this, _Signal_listeners, "f").add(actual_listener);
        return () => void __classPrivateFieldGet(this, _Signal_listeners, "f").delete(actual_listener);
    }
    clear() {
        return __classPrivateFieldGet(this, _Signal_listeners, "f").clear();
    }
    async publish() {
        __classPrivateFieldSet(this, _Signal_wait, __classPrivateFieldGet(this, _Signal_invoke_listeners, "f").call(this), "f");
        await __classPrivateFieldGet(this, _Signal_wait, "f");
    }
    get wait() {
        return __classPrivateFieldGet(this, _Signal_wait, "f");
    }
    get value() {
        this[accessed] = true;
        return __classPrivateFieldGet(this, _Signal_value, "f");
    }
    set value(s) {
        if (__classPrivateFieldGet(this, _Signal_lock, "f"))
            throw new SignalCircularError("you can't set a signal in a signal's subscription listener (infinite loop forbidden)");
        __classPrivateFieldSet(this, _Signal_value, s, "f");
        this.publish();
    }
}
_Signal_value = new WeakMap(), _Signal_lock = new WeakMap(), _Signal_wait = new WeakMap(), _Signal_listeners = new WeakMap(), _Signal_invoke_listeners = new WeakMap(), _a = accessed;
//# sourceMappingURL=signal.js.map