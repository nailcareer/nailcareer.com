const JsError = Error;
export var Op;
(function (Op) {
    Op.loading = () => ({ mode: "loading" });
    Op.error = (reason) => ({ mode: "error", reason });
    Op.ready = (payload) => ({ mode: "ready", payload });
    Op.is = Object.freeze({
        loading: (op) => op.mode === "loading",
        error: (op) => op.mode === "error",
        ready: (op) => op.mode === "ready",
    });
    function payload(op) {
        return (op.mode === "ready")
            ? op.payload
            : undefined;
    }
    Op.payload = payload;
    function select(op, choices) {
        switch (op.mode) {
            case "loading":
                return choices.loading();
            case "error":
                return choices.error(op.reason);
            case "ready":
                return choices.ready(op.payload);
            default:
                console.error("op", op);
                throw new JsError("invalid op mode");
        }
    }
    Op.select = select;
    async function run(set_op, operation) {
        set_op(Op.loading());
        try {
            const payload = await operation();
            set_op(Op.ready(payload));
            return payload;
        }
        catch (err) {
            const reason = (err instanceof JsError)
                ? err.message
                : (typeof err === "string")
                    ? err
                    : "error";
            set_op(Op.error(reason));
        }
    }
    Op.run = run;
    function morph(op, transmute) {
        return select(op, {
            loading: () => Op.loading(),
            error: reason => Op.error(reason),
            ready: a => Op.ready(transmute(a)),
        });
    }
    Op.morph = morph;
})(Op || (Op = {}));
//# sourceMappingURL=op.js.map