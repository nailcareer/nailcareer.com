export declare namespace Op {
    type Mode = "loading" | "error" | "ready";
    type Loading = {
        mode: "loading";
    };
    type Error = {
        mode: "error";
        reason: string;
    };
    type Ready<X> = {
        mode: "ready";
        payload: X;
    };
    type For<X> = Loading | Error | Ready<X>;
    type Setter<X> = (op: For<X>) => void;
    const loading: <X>() => For<X>;
    const error: <X>(reason: string) => For<X>;
    const ready: <X>(payload: X) => For<X>;
    const is: Readonly<{
        loading: (op: For<any>) => boolean;
        error: (op: For<any>) => boolean;
        ready: (op: For<any>) => boolean;
    }>;
    function payload<X>(op: For<X>): X | undefined;
    type Choices<X, R> = {
        loading: () => R;
        error: (reason: string) => R;
        ready: (payload: X) => R;
    };
    function select<X, R>(op: For<X>, choices: Choices<X, R>): R;
    function run<X>(set_op: Setter<X>, operation: () => Promise<X>): Promise<X | undefined>;
    function morph<A, B>(op: For<A>, transmute: (a: A) => B): For<B>;
}
