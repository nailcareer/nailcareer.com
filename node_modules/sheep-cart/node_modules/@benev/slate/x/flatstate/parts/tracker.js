var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Tracker_tracking;
import { make_map } from "./makers.js";
import { maptool } from "../../tools/maptool.js";
export class Tracker {
    constructor() {
        _Tracker_tracking.set(this, new WeakMap());
    }
    grab_keymap(state) {
        const keymap = maptool(__classPrivateFieldGet(this, _Tracker_tracking, "f")).grab(state, make_map);
        return {
            keymap,
            grab_symbolmap(key) {
                return maptool(keymap).grab(key, make_map);
            },
        };
    }
    clear() {
        __classPrivateFieldSet(this, _Tracker_tracking, new WeakMap(), "f");
    }
}
_Tracker_tracking = new WeakMap();
//# sourceMappingURL=tracker.js.map