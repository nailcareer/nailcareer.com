var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Translation_instances, _Translation_prefix, _Translation_home, _Translation_get;
import { translators } from "./translators.js";
import { parse_hash_parts } from "./parts/parse_hash_parts.js";
export class Translation {
    constructor(home, prefix) {
        _Translation_instances.add(this);
        _Translation_prefix.set(this, void 0);
        _Translation_home.set(this, void 0);
        __classPrivateFieldSet(this, _Translation_prefix, prefix, "f");
        __classPrivateFieldSet(this, _Translation_home, home, "f");
    }
    routify(hash) {
        const [zone, ...hashparts] = parse_hash_parts(__classPrivateFieldGet(this, _Translation_prefix, "f"), hash);
        return __classPrivateFieldGet(this, _Translation_instances, "m", _Translation_get).call(this, zone).routify(hashparts);
    }
    hashify(route) {
        return __classPrivateFieldGet(this, _Translation_prefix, "f") + __classPrivateFieldGet(this, _Translation_instances, "m", _Translation_get).call(this, route.zone).hashify(route);
    }
}
_Translation_prefix = new WeakMap(), _Translation_home = new WeakMap(), _Translation_instances = new WeakSet(), _Translation_get = function _Translation_get(zone) {
    const t = translators(__classPrivateFieldGet(this, _Translation_home, "f"));
    if (zone === "")
        zone = "home";
    if (!(zone in t))
        zone = "not_found";
    return t[zone];
};
//# sourceMappingURL=translation.js.map