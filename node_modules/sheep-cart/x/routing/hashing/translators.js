import { translator } from "./parts/translator.js";
import { utransform } from "../../tools/utransform.js";
export const translators = (home) => ({
    home: translator({
        hashify: () => "/",
        routify: () => ({ zone: "home", area: home }),
    }),
    products: translator({
        hashify: () => "/products",
        routify: () => ({ zone: "products" }),
    }),
    collections: translator({
        hashify: () => "/collections",
        routify: () => ({ zone: "collections" }),
    }),
    search: translator({
        hashify: ({ terms, tags }) => {
            const e = (t) => t.map(encodeURIComponent).join(":");
            const query = tags.length > 0
                ? e(terms) + "::" + e(tags)
                : e(terms);
            return `/search/${query}`;
        },
        routify: hashparts => {
            const [raw] = hashparts;
            const splitty = (s) => s.split(":").filter(t => t.length);
            if (raw.includes("::")) {
                const [rawterms, rawtags] = raw.split("::");
                const tags = splitty(rawtags);
                const terms = splitty(rawterms);
                return { zone: "search", terms, tags };
            }
            else
                return { zone: "search", terms: splitty(raw), tags: [] };
        },
    }),
    collection: translator({
        hashify: ({ label, id }) => `/collection/${label}/${utransform.id.shorten(id)}`,
        routify: ([label, id]) => ({
            zone: "collection",
            label,
            id: utransform.id.expand.collection(id),
        }),
    }),
    product: translator({
        hashify: ({ label, id }) => `/product/${label}/${utransform.id.shorten(id)}`,
        routify: ([label, id]) => ({
            zone: "product",
            label,
            id: utransform.id.expand.product(id),
        }),
    }),
    not_found: translator({
        hashify: () => "/",
        routify: () => ({ zone: "not_found" }),
    }),
});
//# sourceMappingURL=translators.js.map