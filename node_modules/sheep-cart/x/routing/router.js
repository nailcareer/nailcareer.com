var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Router_instances, _Router_set_hash, _Router_translation, _Router_route, _Router_home, _Router_routefor;
import { pub } from "@benev/slate";
import { Translation } from "./hashing/translation.js";
export class Router {
    constructor({ home, prefix = "", set_hash }) {
        _Router_instances.add(this);
        _Router_set_hash.set(this, void 0);
        _Router_translation.set(this, void 0);
        _Router_route.set(this, void 0);
        _Router_home.set(this, void 0);
        this.on_route_change = pub();
        this.hashchange = (event) => {
            const { hash } = new URL(event.newURL);
            this.apply_hash(hash);
        };
        this.routes = {
            home: () => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "home", area: __classPrivateFieldGet(this, _Router_home, "f") }),
            collections: () => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "collections" }),
            products: () => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "products" }),
            search: (terms, tags) => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "search", terms, tags }),
            collection: ({ id, handle: label }) => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "collection", id, label }),
            product: ({ id, handle: label }) => __classPrivateFieldGet(this, _Router_instances, "m", _Router_routefor).call(this, { zone: "product", id, label }),
        };
        __classPrivateFieldSet(this, _Router_home, home, "f");
        __classPrivateFieldSet(this, _Router_set_hash, set_hash, "f");
        __classPrivateFieldSet(this, _Router_route, { zone: "home", area: home }, "f");
        __classPrivateFieldSet(this, _Router_translation, new Translation(home, prefix), "f");
    }
    static setup(home, prefix = "") {
        const router = new Router({
            home,
            prefix,
            set_hash: hash => location.hash = hash,
        });
        router.apply_hash(location.hash);
        addEventListener("hashchange", router.hashchange);
        return router;
    }
    get route() {
        return __classPrivateFieldGet(this, _Router_route, "f");
    }
    set route(r) {
        const hash = __classPrivateFieldGet(this, _Router_translation, "f").hashify(r);
        __classPrivateFieldGet(this, _Router_set_hash, "f").call(this, hash);
    }
    apply_hash(hash) {
        const route = __classPrivateFieldGet(this, _Router_translation, "f").routify(hash);
        __classPrivateFieldSet(this, _Router_route, route, "f");
        this.on_route_change.publish(route);
    }
    get search_terms() {
        const route = __classPrivateFieldGet(this, _Router_route, "f");
        return (route && route.zone === "search")
            ? route.terms
            : [];
    }
    get search_tags() {
        const route = __classPrivateFieldGet(this, _Router_route, "f");
        return (route && route.zone === "search")
            ? route.tags
            : [];
    }
}
_Router_set_hash = new WeakMap(), _Router_translation = new WeakMap(), _Router_route = new WeakMap(), _Router_home = new WeakMap(), _Router_instances = new WeakSet(), _Router_routefor = function _Router_routefor(route) {
    const hash = __classPrivateFieldGet(this, _Router_translation, "f").hashify(route);
    return {
        url: "#" + hash,
        go: () => __classPrivateFieldGet(this, _Router_set_hash, "f").call(this, hash),
    };
};
//# sourceMappingURL=router.js.map