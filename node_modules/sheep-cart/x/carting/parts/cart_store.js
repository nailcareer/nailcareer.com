var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CartStore_key, _CartStore_storage;
export class CartStore {
    constructor(key, storage) {
        _CartStore_key.set(this, void 0);
        _CartStore_storage.set(this, void 0);
        __classPrivateFieldSet(this, _CartStore_key, key, "f");
        __classPrivateFieldSet(this, _CartStore_storage, storage, "f");
    }
    save(pack) {
        const v1 = {
            version: 1,
            pack,
        };
        __classPrivateFieldGet(this, _CartStore_storage, "f").setItem(__classPrivateFieldGet(this, _CartStore_key, "f"), JSON.stringify(v1));
    }
    load() {
        let pack = { items: [] };
        const text = __classPrivateFieldGet(this, _CartStore_storage, "f").getItem(__classPrivateFieldGet(this, _CartStore_key, "f"));
        if (text) {
            try {
                const data = JSON.parse(text);
                if (data.version === 1)
                    pack = data.pack;
            }
            catch (err) { }
        }
        return pack;
    }
}
_CartStore_key = new WeakMap(), _CartStore_storage = new WeakMap();
//# sourceMappingURL=cart_store.js.map