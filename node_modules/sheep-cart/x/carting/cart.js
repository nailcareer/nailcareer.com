var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Cart_instances, _Cart_shopify, _Cart_store, _Cart_state, _Cart_flatstate, _Cart_get_item, _Cart_get_product, _Cart_fetch_products;
import { Flat, flat, Op } from "@benev/slate";
export class Cart {
    constructor(shopify, store) {
        _Cart_instances.add(this);
        _Cart_shopify.set(this, void 0);
        _Cart_store.set(this, void 0);
        _Cart_state.set(this, void 0);
        _Cart_flatstate.set(this, (x) => flat.state(x));
        __classPrivateFieldSet(this, _Cart_shopify, shopify, "f");
        __classPrivateFieldSet(this, _Cart_store, store, "f");
        __classPrivateFieldSet(this, _Cart_state, flat.state({
            items: [],
            products: [],
        }), "f");
        this.state = Flat.readonly(__classPrivateFieldGet(this, _Cart_state, "f"));
    }
    save() {
        const { items } = __classPrivateFieldGet(this, _Cart_state, "f");
        __classPrivateFieldGet(this, _Cart_store, "f").save({ items });
    }
    async load() {
        const pack = __classPrivateFieldGet(this, _Cart_store, "f").load();
        const promise = __classPrivateFieldGet(this, _Cart_instances, "m", _Cart_fetch_products).call(this, pack.items);
        __classPrivateFieldGet(this, _Cart_state, "f").items = pack.items.map(__classPrivateFieldGet(this, _Cart_flatstate, "f"));
        await promise;
    }
    get units() {
        return __classPrivateFieldGet(this, _Cart_state, "f").items
            .map(item => ({ item, product: __classPrivateFieldGet(this, _Cart_instances, "m", _Cart_get_product).call(this, item.product_id) }))
            .filter(data => !!data.product && Op.is.ready(data.product.op))
            .map(data => {
            const product = Op.payload(data.product.op);
            const variant = product === null || product === void 0 ? void 0 : product.variants.edges.map(e => e.node).find(v => v.id === data.item.variant_id);
            return (!!product && !!variant && variant.availableForSale)
                ? {
                    product,
                    variant,
                    product_id: data.item.product_id,
                    variant_id: data.item.variant_id,
                    quantity: data.item.quantity,
                }
                : undefined;
        })
            .filter(u => !!u);
    }
    add(variant_id, product) {
        // add item
        __classPrivateFieldGet(this, _Cart_state, "f").items = [
            __classPrivateFieldGet(this, _Cart_flatstate, "f").call(this, {
                product_id: product.id,
                variant_id,
                quantity: 1,
            }),
            ...__classPrivateFieldGet(this, _Cart_state, "f").items.filter(i => i.variant_id !== variant_id),
        ];
        // add product in ready state
        __classPrivateFieldGet(this, _Cart_state, "f").products = [
            __classPrivateFieldGet(this, _Cart_flatstate, "f").call(this, {
                product_id: product.id,
                op: Op.ready(product),
            }),
            ...__classPrivateFieldGet(this, _Cart_state, "f").products.filter(p => p.product_id !== product.id),
        ];
        this.save();
    }
    remove(variant_id) {
        __classPrivateFieldGet(this, _Cart_state, "f").items = __classPrivateFieldGet(this, _Cart_state, "f").items
            .filter(i => i.variant_id !== variant_id);
        this.save();
    }
    set_quantity(variant_id, quantity) {
        const item = __classPrivateFieldGet(this, _Cart_instances, "m", _Cart_get_item).call(this, variant_id);
        item.quantity = quantity;
        this.save();
    }
    clear() {
        __classPrivateFieldGet(this, _Cart_state, "f").items = [];
        this.save();
    }
}
_Cart_shopify = new WeakMap(), _Cart_store = new WeakMap(), _Cart_state = new WeakMap(), _Cart_flatstate = new WeakMap(), _Cart_instances = new WeakSet(), _Cart_get_item = function _Cart_get_item(variant_id) {
    return __classPrivateFieldGet(this, _Cart_state, "f").items.find(i => i.variant_id === variant_id);
}, _Cart_get_product = function _Cart_get_product(product_id) {
    return __classPrivateFieldGet(this, _Cart_state, "f").products.find(i => i.product_id === product_id);
}, _Cart_fetch_products = async function _Cart_fetch_products(items) {
    var _a;
    const new_product_ids = items
        .filter(i => !__classPrivateFieldGet(this, _Cart_instances, "m", _Cart_get_product).call(this, i.product_id))
        .map(i => i.product_id);
    const new_caches = new_product_ids
        .map(product_id => ({ product_id, op: Op.loading() }))
        .map(__classPrivateFieldGet(this, _Cart_flatstate, "f"));
    __classPrivateFieldGet(this, _Cart_state, "f").products = [
        ...__classPrivateFieldGet(this, _Cart_state, "f").products,
        ...new_caches
    ];
    if (new_product_ids.length > 0) {
        try {
            const products = (_a = (await __classPrivateFieldGet(this, _Cart_shopify, "f")
                .specific_products({ ids: new_product_ids }))) !== null && _a !== void 0 ? _a : [];
            for (const cache of new_caches) {
                const product = products.find(p => (p === null || p === void 0 ? void 0 : p.id) === cache.product_id);
                cache.op = product
                    ? Op.ready(product)
                    : Op.error("error retrieving product");
            }
        }
        catch (error) {
            console.error("a cart product could not be loaded,", error);
            this.clear();
        }
    }
};
//# sourceMappingURL=cart.js.map