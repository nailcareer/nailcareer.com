export class ChoiceHelper {
    constructor(productHelper, choices) {
        this.productHelper = productHelper;
        this.choices = choices;
    }
    get_choice(name) {
        var _a;
        const { productHelper, choices } = this;
        const initial_choices = productHelper.first_variant.selectedOptions;
        const found = (_a = choices.find(choice => choice.name === name)) !== null && _a !== void 0 ? _a : initial_choices.find(choice => choice.name === name);
        if (!found)
            throw new Error(`choice not found (${name})`);
        return found.value;
    }
    get selected_variant() {
        var _a;
        const { productHelper } = this;
        return (_a = (productHelper.variants
            .find(variant => variant.selectedOptions
            .every(({ name, value }) => value === this.get_choice(name))))) !== null && _a !== void 0 ? _a : productHelper.first_variant;
    }
    get chosen_image() {
        const { productHelper } = this;
        const variant = this.selected_variant;
        let image;
        if (variant.image)
            image = productHelper.images
                .find(i => i.id === variant.image.id);
        if (!image)
            image = productHelper.featured_image;
        return image;
    }
    get side_images() {
        const primary_image = this.chosen_image;
        return this.productHelper.images
            .filter(image => image.id !== (primary_image === null || primary_image === void 0 ? void 0 : primary_image.id));
    }
}
//# sourceMappingURL=choice_helper.js.map