var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Remote_settings;
import { defaults } from "../parts/defaults.js";
import { ShopifyResponseError } from "../parts/errors.js";
export class Remote {
    constructor(settings) {
        _Remote_settings.set(this, void 0);
        __classPrivateFieldSet(this, _Remote_settings, settings, "f");
    }
    async request({ query, variables }) {
        const { domain, storefront_access_token, api_version = defaults.api_version, } = __classPrivateFieldGet(this, _Remote_settings, "f");
        const url = `https://${domain}/api/${api_version}/graphql`;
        const method = "POST";
        const headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "X-Sdk-Variant": "javascript",
            "X-Sdk-Version": "2.19.0",
            "X-Shopify-Storefront-Access-Token": storefront_access_token,
        };
        const response = await fetch(url, {
            method,
            headers,
            mode: "cors",
            body: JSON.stringify({ query, variables }),
            credentials: "omit",
        });
        const result = await response.json();
        if ("errors" in result)
            for (const error of result.errors)
                throw new ShopifyResponseError(error);
        return result.data;
    }
}
_Remote_settings = new WeakMap();
//# sourceMappingURL=remote.js.map