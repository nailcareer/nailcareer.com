import { Remote } from "./remote/remote.js";
import { defaults } from "./parts/defaults.js";
import { concurrent } from "../tools/concurrent.js";
import { all } from "./graphql/pagination/helpers/all.js";
import { paginate } from "./graphql/pagination/paginate.js";
import { first } from "./graphql/pagination/helpers/first.js";
import { make_request_for_shop } from "./graphql/shop.js";
import { make_request_for_tags } from "./graphql/tags.js";
import { make_request_for_single_product } from "./graphql/product.js";
import { make_request_for_products } from "./graphql/products.js";
import { ShopifyCheckoutError, ShopifyNotFoundError } from "./parts/errors.js";
import { make_request_for_specific_products } from "./graphql/specific_products.js";
import { make_request_for_collections } from "./graphql/collections.js";
import { make_request_for_checkout_create } from "./graphql/checkout.js";
import { convert_product_query_spec_to_string } from "./product_queries/convert_product_query_spec_to_string.js";
import { make_request_for_products_in_collection } from "./graphql/products_in_collection.js";
import { make_request_for_product_recommendations } from "./graphql/product_recommendations.js";
export class Shopify {
    static setup(settings) {
        return new this({ remote: new Remote(settings) });
    }
    constructor(o) {
        this.remote = o.remote;
    }
    async shop() {
        return this.remote.request(make_request_for_shop());
    }
    async product(o) {
        var _a;
        const { product } = await this.remote.request(make_request_for_single_product({
            id: o.id,
            image_format: (_a = o.image_format) !== null && _a !== void 0 ? _a : defaults.image_format,
        }));
        if (!product)
            throw new ShopifyNotFoundError(`product ${o.id}`);
        return product;
    }
    async *products(o = {}) {
        yield* paginate(async (after) => {
            var _a, _b, _c;
            return (await this.remote.request(make_request_for_products({
                after,
                page_size: (_a = o.page_size) !== null && _a !== void 0 ? _a : defaults.page_size,
                image_format: (_b = o.image_format) !== null && _b !== void 0 ? _b : defaults.image_format,
                query: convert_product_query_spec_to_string(o.query),
                sort: (_c = o.sort) !== null && _c !== void 0 ? _c : "BEST_SELLING",
                reverse: o.reverse,
            }))).products;
        });
    }
    async *collections(o = {}) {
        yield* paginate(async (after) => {
            var _a, _b;
            return (await this.remote.request(make_request_for_collections({
                after,
                page_size: (_a = o.page_size) !== null && _a !== void 0 ? _a : defaults.page_size,
                image_format: (_b = o.image_format) !== null && _b !== void 0 ? _b : defaults.image_format,
            }))).collections;
        });
    }
    async *tags(o = {}) {
        var _a;
        const result = await this.remote.request(make_request_for_tags({ page_size: (_a = o.page_size) !== null && _a !== void 0 ? _a : defaults.page_size }));
        const tags = result.productTags.edges.map(e => e.node);
        const more = false;
        yield [tags, more];
    }
    async *products_in_collection(o) {
        yield* paginate(async (after) => {
            var _a, _b, _c, _d;
            return (_d = (await this.remote.request(make_request_for_products_in_collection({
                after,
                collection_id: o.collection_id,
                page_size: (_a = o.page_size) !== null && _a !== void 0 ? _a : defaults.page_size,
                image_format: (_b = o.image_format) !== null && _b !== void 0 ? _b : defaults.image_format,
                filters: (_c = o.filters) !== null && _c !== void 0 ? _c : [],
            }))).collection) === null || _d === void 0 ? void 0 : _d.products;
        });
    }
    async product_recommendations(o) {
        var _a;
        return (await this.remote.request(make_request_for_product_recommendations({
            intent: o.intent,
            product_id: o.product_id,
            image_format: (_a = o.image_format) !== null && _a !== void 0 ? _a : defaults.image_format,
        }))).productRecommendations;
    }
    async specific_products(o) {
        var _a;
        return (await this.remote
            .request(make_request_for_specific_products({
            ids: o.ids,
            image_format: (_a = o.image_format) !== null && _a !== void 0 ? _a : defaults.image_format,
        }))).products;
    }
    async checkout(o) {
        const raw = await this.remote.request(make_request_for_checkout_create({
            line_items: o.line_items,
        }));
        if (!(raw === null || raw === void 0 ? void 0 : raw.checkoutCreate))
            throw new ShopifyNotFoundError(`Failed to create checkout`);
        const { checkout, checkoutUserErrors } = raw.checkoutCreate;
        if (checkoutUserErrors.length > 0)
            throw new ShopifyCheckoutError(checkoutUserErrors);
        return checkout;
    }
    async everything() {
        return concurrent({
            shop: this.shop(),
            tags: Shopify.all(this.tags()),
            products: Shopify.all(this.products()),
            collections: Shopify.all(this.collections()),
        });
    }
}
Shopify.all = all;
Shopify.first = first;
//# sourceMappingURL=shopify.js.map