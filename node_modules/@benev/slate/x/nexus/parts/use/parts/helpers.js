var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Initiator_cleanups;
/** identity function to help you make an init function */
export const initFn = (fn) => fn;
/** identity function to help you make a mount function */
export const mountFn = (fn) => fn;
/** a class intended to be used with use.init via initiate() function */
export class Initiator {
    constructor() {
        _Initiator_cleanups.set(this, []);
    }
    cleanup(fn) {
        __classPrivateFieldGet(this, _Initiator_cleanups, "f").push(fn);
    }
    deinit() {
        for (const cleanup of __classPrivateFieldGet(this, _Initiator_cleanups, "f"))
            cleanup();
    }
}
_Initiator_cleanups = new WeakMap();
/** wrap an initiator instance in an InitResult array */
export function initiator(instance) {
    return [instance, () => instance.deinit()];
}
/** initiate an instance of an initiator class (helpful for use.init) */
export function initiate(C) {
    return (...params) => () => {
        const instance = new C(...params);
        return [instance, () => instance.deinit()];
    };
}
//# sourceMappingURL=helpers.js.map