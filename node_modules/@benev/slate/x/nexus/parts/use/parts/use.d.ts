import { usekey } from "./utils/usekey.js";
import { Context } from "../../../context.js";
import { Init, Mount } from "./types.js";
import { Signal } from "../../../../signals/signal.js";
import { OpSignal } from "../../../../signals/op_signal.js";
export declare class Use<C extends Context = Context> {
    #private;
    [usekey]: {
        wrap: <F extends (...args: any[]) => any>(fn: F) => F;
        disconnect: () => void;
        reconnect: () => void;
        afterRender: () => void;
    };
    constructor(rerender: () => void, context: C);
    get context(): C;
    rerender(): void;
    mount(fn: Mount): void;
    init<R>(fn: Init<R>): R;
    once<T>(prep: () => T): T;
    defer<T>(fn: () => T): T | undefined;
    state<T>(init: T | (() => T)): readonly [T, (v: T) => void, () => T];
    flatstate<S extends Record<string, any>>(init: S | (() => S)): S;
    signal<T>(init: T | (() => T)): Signal<T>;
    computed<T>(update: () => T): Signal<T>;
    op<T>(): OpSignal<T>;
    watch<T>(collector: () => T): T;
    effect(mount: Mount, dependencies: any[]): void;
}
