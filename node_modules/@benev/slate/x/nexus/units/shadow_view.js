var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
import { AsyncDirective } from "lit/async-directive.js";
import { make_view_root } from "../parts/root.js";
import { UseShadowView } from "../parts/use/tailored.js";
import { apply_details } from "../parts/apply_details.js";
import { usekey } from "../parts/use/parts/utils/usekey.js";
import { debounce } from "../../tools/debounce/debounce.js";
import { setup_reactivity } from "../parts/setup_reactivity.js";
import { custom_lit_directive_for_shadow_view } from "../parts/custom_lit_directive_for_shadow_view.js";
export const prepare_shadow_view = ((shell) => (renderer) => {
    var _input, _first_connection, _root, _rerender, _use, _rend, _reactivity, _a;
    return (custom_lit_directive_for_shadow_view((_a = class extends AsyncDirective {
            constructor() {
                super(...arguments);
                _input.set(this, void 0);
                _first_connection.set(this, true);
                _root.set(this, make_view_root({
                    afterRender: () => __classPrivateFieldGet(this, _use, "f")[usekey].afterRender(),
                    onDisconnected: () => this.disconnected(),
                    onConnected: () => {
                        if (!__classPrivateFieldGet(this, _first_connection, "f"))
                            this.reconnected();
                        __classPrivateFieldSet(this, _first_connection, false, "f");
                    },
                }));
                _rerender.set(this, debounce(0, () => {
                    if (__classPrivateFieldGet(this, _input, "f") && this.isConnected)
                        this.setValue(__classPrivateFieldGet(this, _root, "f").render_into_shadow(this.render(__classPrivateFieldGet(this, _input, "f"))));
                }));
                _use.set(this, new UseShadowView(__classPrivateFieldGet(this, _root, "f").container, __classPrivateFieldGet(this, _root, "f").shadow, __classPrivateFieldGet(this, _rerender, "f"), shell.context));
                _rend.set(this, __classPrivateFieldGet(this, _use, "f")[usekey].wrap(renderer(__classPrivateFieldGet(this, _use, "f"))));
                _reactivity.set(this, setup_reactivity(__classPrivateFieldGet(this, _rend, "f"), __classPrivateFieldGet(this, _rerender, "f")));
            }
            update(_, props) {
                return __classPrivateFieldGet(this, _root, "f").render_into_shadow(this.render(...props));
            }
            render(input) {
                var _b, _c, _d;
                apply_details(__classPrivateFieldGet(this, _root, "f").container, input.meta, (_b = __classPrivateFieldGet(this, _input, "f")) === null || _b === void 0 ? void 0 : _b.meta);
                __classPrivateFieldSet(this, _input, input, "f");
                __classPrivateFieldGet(this, _root, "f").auto_exportparts = ((_c = input.meta.auto_exportparts) !== null && _c !== void 0 ? _c : true);
                return (_d = __classPrivateFieldGet(this, _reactivity, "f")) === null || _d === void 0 ? void 0 : _d.render(...input.props);
            }
            reconnected() {
                __classPrivateFieldGet(this, _use, "f")[usekey].reconnect();
                __classPrivateFieldSet(this, _reactivity, setup_reactivity(__classPrivateFieldGet(this, _rend, "f"), __classPrivateFieldGet(this, _rerender, "f")), "f");
            }
            disconnected() {
                __classPrivateFieldGet(this, _use, "f")[usekey].disconnect();
                if (__classPrivateFieldGet(this, _reactivity, "f")) {
                    __classPrivateFieldGet(this, _reactivity, "f").stop();
                    __classPrivateFieldSet(this, _reactivity, undefined, "f");
                }
            }
        },
        _input = new WeakMap(),
        _first_connection = new WeakMap(),
        _root = new WeakMap(),
        _rerender = new WeakMap(),
        _use = new WeakMap(),
        _rend = new WeakMap(),
        _reactivity = new WeakMap(),
        _a)));
});
//# sourceMappingURL=shadow_view.js.map