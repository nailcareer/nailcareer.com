var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Slice_options;
export class Slice {
    constructor(options) {
        _Slice_options.set(this, void 0);
        __classPrivateFieldSet(this, _Slice_options, options, "f");
    }
    get state() {
        return __classPrivateFieldGet(this, _Slice_options, "f").getter(__classPrivateFieldGet(this, _Slice_options, "f").parent.state);
    }
    transmute(fun) {
        __classPrivateFieldGet(this, _Slice_options, "f").parent.transmute(state => {
            const x1 = __classPrivateFieldGet(this, _Slice_options, "f").getter(state);
            const x2 = fun(x1);
            const new_state = __classPrivateFieldGet(this, _Slice_options, "f").setter(state, x2);
            return new_state;
        });
    }
    slice({ getter, setter }) {
        return new Slice({
            parent: this,
            getter,
            setter,
        });
    }
}
_Slice_options = new WeakMap();
//# sourceMappingURL=slice.js.map