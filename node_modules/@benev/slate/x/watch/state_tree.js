var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _StateTree_instances, _StateTree_state, _StateTree_readable, _StateTree_onChange, _StateTree_circularity_lock, _StateTree_make_frozen_clone;
import { Slice } from "./parts/slice.js";
import { deep } from "../tools/deep/deep.js";
export class StateTree {
    constructor(state, onChange = () => { }) {
        _StateTree_instances.add(this);
        _StateTree_state.set(this, void 0);
        _StateTree_readable.set(this, void 0);
        _StateTree_onChange.set(this, void 0);
        _StateTree_circularity_lock.set(this, false);
        __classPrivateFieldSet(this, _StateTree_state, structuredClone(state), "f");
        __classPrivateFieldSet(this, _StateTree_readable, __classPrivateFieldGet(this, _StateTree_instances, "m", _StateTree_make_frozen_clone).call(this), "f");
        __classPrivateFieldSet(this, _StateTree_onChange, onChange, "f");
    }
    get state() {
        return __classPrivateFieldGet(this, _StateTree_readable, "f");
    }
    transmute(fun) {
        if (__classPrivateFieldGet(this, _StateTree_circularity_lock, "f"))
            throw new Error("circular error");
        __classPrivateFieldSet(this, _StateTree_circularity_lock, true, "f");
        __classPrivateFieldSet(this, _StateTree_state, fun(structuredClone(__classPrivateFieldGet(this, _StateTree_state, "f"))), "f");
        __classPrivateFieldSet(this, _StateTree_readable, __classPrivateFieldGet(this, _StateTree_instances, "m", _StateTree_make_frozen_clone).call(this), "f");
        __classPrivateFieldGet(this, _StateTree_onChange, "f").call(this);
        __classPrivateFieldSet(this, _StateTree_circularity_lock, false, "f");
    }
    slice({ getter, setter }) {
        return new Slice({
            parent: this,
            getter,
            setter,
        });
    }
}
_StateTree_state = new WeakMap(), _StateTree_readable = new WeakMap(), _StateTree_onChange = new WeakMap(), _StateTree_circularity_lock = new WeakMap(), _StateTree_instances = new WeakSet(), _StateTree_make_frozen_clone = function _StateTree_make_frozen_clone() {
    return deep.freeze(structuredClone(__classPrivateFieldGet(this, _StateTree_state, "f")));
};
//# sourceMappingURL=state_tree.js.map