export declare function ob<Ob extends object>(o: Ob): {
    map: <Value>(transform: ObTransform<Ob, Value>) => { [P in keyof Ob]: Value; };
    filter: (predicate: ObPredicate<Ob>) => { [P_1 in keyof Ob]?: Ob[keyof Ob] | undefined; };
};
export declare namespace ob {
    var pipe: Readonly<{
        map: <O extends {}, Value>(transform: (value: O[keyof O], key: keyof O) => Value) => (o: O) => { [P in keyof O]: Value; };
        filter: <O_1 extends {}>(transform: (value: O_1[keyof O_1], key: keyof O_1) => boolean) => (o: O_1) => {
            [key: string]: O_1[keyof O_1];
        };
    }>;
}
export type ObTransform<Ob extends object, Value> = ((value: Ob[keyof Ob], key: keyof Ob) => Value);
export type ObPredicate<Ob extends object> = ((value: Ob[keyof Ob], key: keyof Ob) => boolean);
