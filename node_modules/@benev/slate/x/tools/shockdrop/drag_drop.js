var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ShockDragDrop_params, _ShockDragDrop_state;
import { flat } from "../../nexus/state.js";
import { dragleave_has_exited_current_target } from "./utils/dragleave_has_exited_current_target.js";
export class ShockDragDrop {
    constructor(params) {
        _ShockDragDrop_params.set(this, void 0);
        _ShockDragDrop_state.set(this, flat.state({
            grabbed: undefined,
            hovering: undefined,
        }));
        this.dragzone = {
            draggable: () => "true",
            dragstart: (grabbed) => (_) => {
                __classPrivateFieldGet(this, _ShockDragDrop_state, "f").grabbed = grabbed;
            },
            dragend: () => (_) => {
                __classPrivateFieldGet(this, _ShockDragDrop_state, "f").grabbed = undefined;
                __classPrivateFieldGet(this, _ShockDragDrop_state, "f").hovering = undefined;
            },
        };
        this.dropzone = {
            dragenter: () => (_) => { },
            dragleave: () => (event) => {
                if (dragleave_has_exited_current_target(event))
                    __classPrivateFieldGet(this, _ShockDragDrop_state, "f").hovering = undefined;
            },
            dragover: (hovering) => (event) => {
                const { out_of_band } = __classPrivateFieldGet(this, _ShockDragDrop_params, "f");
                event.preventDefault();
                if (__classPrivateFieldGet(this, _ShockDragDrop_state, "f").grabbed || (out_of_band && out_of_band.predicate(event, hovering)))
                    __classPrivateFieldGet(this, _ShockDragDrop_state, "f").hovering = hovering;
            },
            drop: (hovering) => (event) => {
                const { handle_drop, out_of_band } = __classPrivateFieldGet(this, _ShockDragDrop_params, "f");
                event.preventDefault();
                const { grabbed } = __classPrivateFieldGet(this, _ShockDragDrop_state, "f");
                __classPrivateFieldGet(this, _ShockDragDrop_state, "f").grabbed = undefined;
                __classPrivateFieldGet(this, _ShockDragDrop_state, "f").hovering = undefined;
                if (grabbed)
                    handle_drop(event, grabbed, hovering);
                else if (out_of_band && out_of_band.predicate(event, hovering))
                    out_of_band.handle_drop(event, hovering);
            },
        };
        __classPrivateFieldSet(this, _ShockDragDrop_params, params, "f");
    }
    get grabbed() {
        return __classPrivateFieldGet(this, _ShockDragDrop_state, "f").grabbed;
    }
    get hovering() {
        return __classPrivateFieldGet(this, _ShockDragDrop_state, "f").hovering;
    }
}
_ShockDragDrop_params = new WeakMap(), _ShockDragDrop_state = new WeakMap();
//# sourceMappingURL=drag_drop.js.map