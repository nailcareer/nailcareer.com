var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _SilverElement_init, _SilverElement_wait, _SilverElement_render_debounced;
import { render } from "lit";
import { MetallicElement } from "./part/metallic.js";
import { debounce } from "../tools/debounce/debounce.js";
import { explode_promise } from "../tools/explode_promise.js";
export class SilverElement extends MetallicElement {
    init() { }
    constructor() {
        super();
        _SilverElement_init.set(this, explode_promise());
        _SilverElement_wait.set(this, __classPrivateFieldGet(this, _SilverElement_init, "f").promise);
        _SilverElement_render_debounced.set(this, debounce(0, () => {
            const template = this.render();
            render(template, this, { host: this });
        }));
        this.init();
    }
    get updateComplete() {
        return __classPrivateFieldGet(this, _SilverElement_wait, "f").then(() => true);
    }
    render() { }
    async requestUpdate() {
        const promise = __classPrivateFieldGet(this, _SilverElement_render_debounced, "f").call(this);
        if (__classPrivateFieldGet(this, _SilverElement_init, "f")) {
            promise.then(__classPrivateFieldGet(this, _SilverElement_init, "f").resolve);
            __classPrivateFieldSet(this, _SilverElement_init, undefined, "f");
        }
        __classPrivateFieldSet(this, _SilverElement_wait, promise, "f");
        return promise;
    }
    connectedCallback() {
        super.connectedCallback();
        this.requestUpdate();
    }
}
_SilverElement_init = new WeakMap(), _SilverElement_wait = new WeakMap(), _SilverElement_render_debounced = new WeakMap();
//# sourceMappingURL=silver.js.map