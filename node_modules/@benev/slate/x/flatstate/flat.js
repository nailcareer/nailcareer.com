var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Flat_tracker, _Flat_recorder, _Flat_locker, _Flat_stopper, _Flat_scheduler, _Flat_proxy_handlers;
import { Locker } from "./parts/locker.js";
import { Tracker } from "./parts/tracker.js";
import { Stopper } from "./parts/stopper.js";
import { Recorder } from "./parts/recorder.js";
import { readonly } from "./parts/readonly.js";
import { Scheduler } from "./parts/scheduler.js";
import { collectivize } from "./parts/collectivize.js";
import { save_reaction } from "./parts/save_reaction.js";
import { proxy_handlers } from "./parts/proxy_handlers.js";
export class Flat {
    constructor() {
        _Flat_tracker.set(this, new Tracker());
        _Flat_recorder.set(this, new Recorder());
        _Flat_locker.set(this, new Locker());
        _Flat_stopper.set(this, new Stopper());
        _Flat_scheduler.set(this, new Scheduler());
        _Flat_proxy_handlers.set(this, proxy_handlers(__classPrivateFieldGet(this, _Flat_tracker, "f"), __classPrivateFieldGet(this, _Flat_recorder, "f"), __classPrivateFieldGet(this, _Flat_locker, "f"), __classPrivateFieldGet(this, _Flat_stopper, "f"), __classPrivateFieldGet(this, _Flat_scheduler, "f")));
    }
    get wait() {
        return __classPrivateFieldGet(this, _Flat_scheduler, "f").wait;
    }
    state(state) {
        return new Proxy(state, __classPrivateFieldGet(this, _Flat_proxy_handlers, "f"));
    }
    reaction(collector, responder) {
        const symbol = Symbol();
        const { recording } = __classPrivateFieldGet(this, _Flat_recorder, "f").record(() => __classPrivateFieldGet(this, _Flat_locker, "f").lock(collector));
        __classPrivateFieldGet(this, _Flat_stopper, "f").add(symbol, save_reaction(symbol, recording, __classPrivateFieldGet(this, _Flat_tracker, "f"), { collector, responder }));
        return () => __classPrivateFieldGet(this, _Flat_stopper, "f").stop(symbol);
    }
    lean(actor) {
        const symbol = Symbol();
        return {
            stop: () => __classPrivateFieldGet(this, _Flat_stopper, "f").stop(symbol),
            collect: collector => {
                const { payload, recording } = __classPrivateFieldGet(this, _Flat_recorder, "f").record(() => __classPrivateFieldGet(this, _Flat_locker, "f").lock(collector));
                __classPrivateFieldGet(this, _Flat_stopper, "f").add(symbol, save_reaction(symbol, recording, __classPrivateFieldGet(this, _Flat_tracker, "f"), { lean: true, actor }));
                return payload;
            },
        };
    }
    clear() {
        __classPrivateFieldGet(this, _Flat_tracker, "f").clear();
    }
}
_Flat_tracker = new WeakMap(), _Flat_recorder = new WeakMap(), _Flat_locker = new WeakMap(), _Flat_stopper = new WeakMap(), _Flat_scheduler = new WeakMap(), _Flat_proxy_handlers = new WeakMap();
Flat.readonly = readonly;
Flat.collectivize = collectivize;
//# sourceMappingURL=flat.js.map