var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Stopper_map;
export class Stopper {
    constructor() {
        _Stopper_map.set(this, new Map);
    }
    stop(symbol) {
        const stop = __classPrivateFieldGet(this, _Stopper_map, "f").get(symbol);
        if (stop) {
            __classPrivateFieldGet(this, _Stopper_map, "f").delete(symbol);
            stop();
        }
    }
    add(symbol, fun) {
        __classPrivateFieldGet(this, _Stopper_map, "f").set(symbol, fun);
    }
}
_Stopper_map = new WeakMap();
//# sourceMappingURL=stopper.js.map