var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Recorder_recordings;
import { maptool } from "../../tools/maptool.js";
import { make_map, make_set } from "./makers.js";
export class Recorder {
    constructor() {
        _Recorder_recordings.set(this, []);
    }
    record(fn) {
        const recording = make_map();
        __classPrivateFieldGet(this, _Recorder_recordings, "f").push(recording);
        const payload = fn();
        __classPrivateFieldGet(this, _Recorder_recordings, "f").pop();
        return { payload, recording };
    }
    record_that_key_was_accessed(state, key) {
        const recording = __classPrivateFieldGet(this, _Recorder_recordings, "f").at(-1);
        if (recording) {
            const keyset = maptool(recording).guarantee(state, make_set);
            keyset.add(key);
        }
    }
}
_Recorder_recordings = new WeakMap();
//# sourceMappingURL=recorder.js.map